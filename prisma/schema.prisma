// ---------- Prisma setup ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum RoleLevel {
  ADMIN
  MANAGER
  CLEANER
  PENDING
}

enum RoleStatus {
  ACTIVE
  DISABLED
}

enum RoomOccupancy {
  AVAILABLE
  OCCUPIED
}

enum RoomCleanliness {
  CLEAN
  DIRTY
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  DONE
}

// ---------- Domain models ----------

model Hotel {
  id          String   @id @default(uuid())
  name        String   @unique
  address     String?
  phone       String?
  email       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rooms Room[]
  roles Role[]
}

model Room {
  id          String          @id @default(uuid())
  number      String
  occupancy   RoomOccupancy   @default(AVAILABLE)
  cleanliness RoomCleanliness @default(CLEAN)
  notes       String?

  hotelId    String
  hotel      Hotel        @relation(fields: [hotelId], references: [id], onDelete: Restrict)
  assignment Assignment[]

  @@unique([hotelId, number])
  @@index([hotelId])
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  avatarUrl    String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  assignments    Assignment[]     @relation("AssignmentUsers")
  roles          Role[]
  AssignmentUser AssignmentUser[]
  AssignmentNote AssignmentNote[]
  RefreshToken   RefreshToken[]
  assignedTasks  Assignment[]     @relation("AssignedBy") // Assignments this user created
}

model Role {
  id      String     @id @default(uuid())
  userId  String
  hotelId String
  level   RoleLevel  @default(PENDING)
  status  RoleStatus @default(ACTIVE)

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Restrict)

  @@unique([userId, hotelId, level])
  @@index([hotelId, level])
}

model Assignment {
  id         String           @id @default(uuid())
  roomId     String
  createdAt  DateTime         @default(now())
  dueAt      DateTime
  status     AssignmentStatus @default(PENDING)
  notes      String?
  isActive   Boolean          @default(true)
  assignedBy String?

  room           Room             @relation(fields: [roomId], references: [id], onDelete: Restrict)
  users          User[]           @relation("AssignmentUsers")
  AssignmentUser AssignmentUser[]
  AssignmentNote AssignmentNote[]
  assignedByUser User?            @relation("AssignedBy", fields: [assignedBy], references: [id], onDelete: SetNull)

  @@index([dueAt])
  @@index([status])
  @@index([roomId])
  @@index([isActive])
  @@index([assignedBy])
}

model AssignmentUser {
  assignmentId String
  userId       String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([assignmentId, userId])
}

model AssignmentNote {
  id           String   @id @default(uuid())
  assignmentId String
  authorId     String
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// ---------- Auth models (NextAuth Prisma Adapter) ----------

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}
