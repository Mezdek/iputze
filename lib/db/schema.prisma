// ---------- Prisma setup ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Use "sqlite" for local dev, "postgresql" for production
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum RoleLevel {
  ADMIN
  MANAGER
  CLEANER
  PENDING
}

enum RoleStatus {
  ACTIVE
  DISABLED
}

enum RoomOccupancy {
  VACANT
  OCCUPIED
  UNAVAILABLE
}

enum RoomCleanliness {
  CLEAN
  DIRTY
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  RESTORE
  LOGIN
  LOGOUT
  ROLE_CHANGE
  TASK_START
  TASK_COMPLETE
  TASK_CANCEL
}

// ---------- Domain models ----------

model Hotel {
  id          String    @id @default(uuid())
  name        String    @unique
  address     String?
  phone       String?
  email       String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  rooms Room[]
  roles Role[]

  @@index([deletedAt])
}

model Room {
  id             String          @id @default(uuid())
  number         String
  occupancy      RoomOccupancy   @default(VACANT)
  cleanliness    RoomCleanliness @default(CLEAN)
  notes          String?
  type           String?
  capacity       Int?
  floor          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  lastModifiedBy String?

  hotelId         String
  hotel           Hotel             @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  tasks           Task[]
  defaultCleaners DefaultCleaners[]
  modifier        User?             @relation("RoomModifier", fields: [lastModifiedBy], references: [id], onDelete: SetNull)

  @@unique([hotelId, number])
  @@index([hotelId])
  @@index([hotelId, occupancy])
  @@index([deletedAt])
  @@index([lastModifiedBy])
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  passwordHash String
  avatarUrl    String?
  bio          String?
  timezone     String    @default("UTC")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  roles           Role[]
  taskUsers       TaskUser[]
  notes           Note[]
  refreshTokens   RefreshToken[]
  assignedTasks   Task[]            @relation("AssignedBy")
  sessions        Session[]
  defaultCleaners DefaultCleaners[]
  modifiedRooms   Room[]            @relation("RoomModifier")
  Image           Image[]
  deletedImages   Image[]           @relation("ImageDeletor")
  UserStats       UserStats?
  Achievement     Achievement[]
  WeeklyActivity  WeeklyActivity[]

  @@index([email])
  @@index([deletedAt])
}

model Role {
  id        String     @id @default(uuid())
  userId    String
  hotelId   String
  level     RoleLevel  @default(PENDING)
  status    RoleStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@unique([userId, hotelId, level])
  @@index([hotelId, level])
  @@index([userId, status])
}

model Task {
  id       String       @id @default(uuid())
  roomId   String
  status   TaskStatus   @default(PENDING)
  priority TaskPriority @default(LOW)

  // Timestamps
  createdAt        DateTime  @default(now())
  dueAt            DateTime
  startedAt        DateTime?
  completedAt      DateTime?
  cancelledAt      DateTime?
  cancellationNote String?

  // Time tracking
  estimatedMinutes Int?
  actualMinutes    Int?

  assignedById String?
  assignedBy   User?   @relation("AssignedBy", fields: [assignedById], references: [id], onDelete: SetNull)

  room     Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  cleaners TaskUser[]
  notes    Note[]
  images   Image[]

  @@index([roomId, status, dueAt])
  @@index([assignedById, status])
  @@index([dueAt, priority])
  @@index([status, createdAt])
  @@index([dueAt, status])
  @@index([roomId, dueAt])
}

model TaskUser {
  taskId     String
  userId     String
  assignedAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([taskId, userId])
  @@index([userId])
}

model DefaultCleaners {
  roomId     String
  userId     String
  assignedAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([roomId, userId])
  @@index([userId])
}

model Note {
  id        String    @id @default(uuid())
  taskId    String
  authorId  String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt])
  @@index([deletedAt])
}

model Image {
  id     String @id @default(uuid())
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  url        String // Cloudinary/S3 URL
  uploaderId String
  uploader   User   @relation(fields: [uploaderId], references: [id])

  uploadedAt DateTime @default(now())

  // Soft delete fields
  deletedAt DateTime?
  deletedBy String?
  deletor   User?     @relation("ImageDeletor", fields: [deletedBy], references: [id])

  // EXIF metadata (JSON)
  exif Json?

  @@index([taskId])
  @@index([deletedAt])
}

// Add to schema.prisma for the XP/Performance feature
model UserStats {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  totalXP        Int    @default(0)
  tasksCompleted Int    @default(0)
  averageTime    Float? // Average completion time in minutes
  qualityScore   Float? // Based on feedback/ratings

  lastUpdated DateTime @updatedAt

  @@index([totalXP])
}

model WeeklyActivity {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  weekStart DateTime // Start of week (Monday)
  weekEnd   DateTime // End of week (Sunday)
  xpEarned  Int      @default(0)
  hotelId   String // Track which hotel they were active in
  createdAt DateTime @default(now())

  @@unique([userId, weekStart, hotelId])
  @@index([userId, weekStart])
}

model Achievement {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type       String // "SPEED_DEMON", "PERFECTIONIST", "STREAK_KEEPER"
  unlockedAt DateTime @default(now())

  @@index([userId])
}

// ---------- Audit Log (Centralized) ----------
model AuditLog {
  id String @id @default(uuid())

  // What was changed
  tableName String
  recordId  String // UUID of affected record
  action    AuditAction

  // Who changed it
  userId   String?
  userName String? // Denormalized for history

  // What changed - using Json for PostgreSQL, String for SQLite
  changes Json // For PostgreSQL: Json type, For SQLite: use String

  // When
  timestamp DateTime @default(now())

  // Context
  ipAddress String?
  userAgent String?

  @@index([tableName, recordId, timestamp])
  @@index([userId, timestamp])
  @@index([timestamp])
  @@index([action])
  @@index([tableName, action])
}

// ---------- Auth models ----------

model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  @@index([token])
  @@index([expiresAt])
  @@index([userId])
}

model Session {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  ipAddress String?
  userAgent String?

  lastActivityAt DateTime @default(now())
  deviceInfo     String?

  @@index([userId, expiresAt])
  @@index([lastActivityAt])
  @@index([userId])
  @@index([expiresAt])
}
